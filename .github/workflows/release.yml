name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: write # Needed for creating releases

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21.0'

      - name: Import Apple Certificate
        if: startsWith(github.ref, 'refs/tags/')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build for all platforms
        run: |
          platforms=("windows/amd64" "windows/386" "darwin/amd64" "darwin/arm64" "linux/amd64" "linux/386" "linux/arm64" "linux/arm")
          for platform in "${platforms[@]}"; do
            OS="${platform%/*}"
            ARCH="${platform#*/}"
            output_name="vitals"
            if [ "$OS" = "windows" ]; then
              output_name="vitals.exe"
            fi
            echo "Building for $OS/$ARCH..."
            GOOS=$OS GOARCH=$ARCH go build -o "dist/vitals_${OS}_${ARCH}/$output_name" .
            
            # Sign macOS binaries
            if [ "$OS" = "darwin" ]; then
              echo "Signing macOS binary for $ARCH..."
              codesign --force -s "${{ secrets.APPLE_DEVELOPER_ID }}" --options runtime "dist/vitals_${OS}_${ARCH}/$output_name"
              
              # Create a ZIP for notarization
              cd dist
              ditto -c -k --keepParent "vitals_${OS}_${ARCH}" "vitals_${OS}_${ARCH}.zip"
              
              # Notarize the ZIP
              xcrun notarytool submit "vitals_${OS}_${ARCH}.zip" \
                --apple-id "${{ secrets.APPLE_ID }}" \
                --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
                --team-id "${{ secrets.APPLE_TEAM_ID }}" \
                --wait
              
              # Create the final archive
              tar -czf "vitals_${OS}_${ARCH}.tar.gz" "vitals_${OS}_${ARCH}"
              rm "vitals_${OS}_${ARCH}.zip"
              cd ..
            else
              # Create archive for non-macOS platforms
              cd dist
              if [ "$OS" = "windows" ]; then
                zip -r "vitals_${OS}_${ARCH}.zip" "vitals_${OS}_${ARCH}"
              else
                tar -czf "vitals_${OS}_${ARCH}.tar.gz" "vitals_${OS}_${ARCH}"
              fi
              cd ..
            fi
          done

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            dist/vitals_windows_amd64.zip
            dist/vitals_windows_386.zip
            dist/vitals_darwin_amd64.tar.gz
            dist/vitals_darwin_arm64.tar.gz
            dist/vitals_linux_amd64.tar.gz
            dist/vitals_linux_386.tar.gz
            dist/vitals_linux_arm64.tar.gz
            dist/vitals_linux_arm.tar.gz
          name: Release ${{ github.ref_name }}
          generate_release_notes: true